var bignum=require("bignumber.js"),src=require("../src/src"),CRT=require("../math/CRT"),FHEMath=require("../math/FHEMath"),Encrypt=require("./Encrypt");bignum.config({ROUNDING_MODE:1});class Decrypt{Params(){for(var r=bignum("13537164"),e=src.plaintextModulus,s=bignum("1"),c=new Array(src.cycleorder/2),u=new Array(src.cycleorder/2),o=0;o<src.cycleorder/2;o++)c[o]=s,u[o]=s.times(bignum("2").pow(64)).idiv(e),s=s.times(r).mod(e);return[c,u]}InverseFormat(r,e,s){for(var[c,u]=CRT.rootOfUnityInverseTable(e,s),o=CRT.NTTForward(r,c,u,s),n=0;n<src.cycleorder/2;n++)o[n]=o[n].times(FHEMath.ModInverse(bignum((src.cycleorder/2).toString()),s)).mod(s);return o=CRT.ModMulPrecon(o,c,s,u)}ReadCiphertext(r){for(var e=new Array(src.modulus.length),s=new Array(src.modulus.length),c=0;c<src.modulus.length;c++){for(var u=new Array(src.cycleorder/2),o=new Array(src.cycleorder/2),n=0;n<src.cycleorder/2;n++)u[n]=bignum(r[c][n]),o[n]=bignum(r[c+3][n]);e[c]=u,s[c]=o}return e.push(...s),e}DecryptVector(r,e){e=FHEMath.vectortoBigNumber(e);for(var s=new Array(src.modulus.length),c=new Array(src.modulus.length),u=0;u<src.modulus.length;u++)s[u]=r[u],c[u]=r[u+3];var o=[];for(u=0;u<src.modulus.length;u++){for(var n=new Array(src.cycleorder/2),t=0;t<src.cycleorder/2;t++){var l=s[u][t].plus(e[u][t].times(c[u][t]).mod(src.modulus[u]));l.gt(src.modulus[u])&&(l=l.minus(src.modulus[u])),n[t]=l}o.push(this.InverseFormat(n,src.rootOfUnityInverse[u],src.modulus[u]))}var i=[];for(u=0;u<src.cycleorder/2;u++){var a=bignum("0"),m=bignum("0");for(t=0;t<src.modulus.length;t++){var d=o[t][u];a=a.plus(CRT.ModMulPrecon([d],[src.invTable[t]],src.plaintextModulus,[src.invPreconTable[t]])[0]),m=m.plus(d.times(src.numerator[t]).times(bignum("1000000000")).idiv(src.denominator[t]))}i.push(a.plus(m.idiv(bignum("1000000000"))).mod(src.plaintextModulus).plus(bignum("1")))}var[y,g]=this.Params(),v=CRT.ModMulPrecon(i,y,src.plaintextModulus,g),p=CRT.NTTForward(v,y,g,src.plaintextModulus),b=new Array(src.cycleorder/2),h=Encrypt.Params()[1];for(u=0;u<src.cycleorder/2;u++)b[u]=p[h[u]];const M=src.plaintextModulus.dividedBy(bignum("2"));for(u=0;u<p.length;u++)b[u].gt(M)?b[u]=b[u].minus(src.plaintextModulus).toNumber():b[u]=b[u].toNumber();return b}}module.exports=new Decrypt;